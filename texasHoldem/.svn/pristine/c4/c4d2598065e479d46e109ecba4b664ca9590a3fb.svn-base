/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tarkistajat;

import Kayttoliittyma.Pelipoyta;
import Logiikka.Asetukset;
import logiikka.Kasi;
import Logiikka.Korttipakka.Kortti;
import logiikka.Pelaaja;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author Tero
 */
public class Tarkastaja {

    private static Tarkistettava[] tarkistettavat = {new Varisuora(), new Neloset(), new Tayskasi(), new Vari(), new Suora(), new Kolmoset(), new Kaksiparia(), new Pari(), new Hai()};
    public static final String[] tekstiArvoille = {"","Hai", "Pari", "Kaksi paria", "Kolmoset", "Suora", "Väri", "Täyskäsi", "Neloset", "Värisuora", "Kuningasvärisuora"};
    private Asetukset asetukset;
    
    public Tarkastaja(Asetukset asetukset) {
        this.asetukset = asetukset;
    }

    public String tarkistaVoittaja(Pelaaja p1, Pelaaja p2) {
        String teksti = "";
        int vp1 = 0, vp2 = 0;
        if(p1.isHavinnyt() && p2.isHavinnyt())
            return "Molempien käsissä on väärä järjestys. Pisteitä ei jaeta.";
        if(p1.isHavinnyt()){
            p1.lisaaPisteita(-3);
            p2.lisaaPisteita(3);
            teksti = "Pelaajan "+p1.getNimi()+" käsien järjestys on väärä. Pelaaja "+p2.getNimi()+" voittaa kaikki kädet.";
            if(asetukset.isPaalla(0)){
                p2.lisaaPisteita(1);
                teksti += "Lisäksi pelaaja "+p2.getNimi()+" saa 1 extra pisteen lakaisusta.";
            }
            return teksti;
        }
        if(p2.isHavinnyt()){
            p2.lisaaPisteita(-3);
            p1.lisaaPisteita(3);
            teksti = "Pelaajan "+p2.getNimi()+" käsien järjestys on väärä. Pelaaja "+p1.getNimi()+" voittaa kaikki kädet.";
            if(asetukset.isPaalla(0)){
                p1.lisaaPisteita(1);
                teksti += "Lisäksi pelaaja "+p1.getNimi()+" saa 1 extra pisteen lakaisusta.";
            }
            return teksti;
        }
        for(int i=0;i<3;i++){
            int voittaja = p1.getKasi(i).vertaa(p2.getKasi(i));
            if(voittaja == 1){
                vp1++;
                p2.lisaaPisteita(-1);
                p1.lisaaPisteita(1);
                teksti += "Pelaaja "+p1.getNimi()+" voittaa ";
                if(i==0)
                    teksti += "etu";
                else if(i==1)
                    teksti += "keski";
                else 
                    teksti += "taka";
                teksti += "käden.\n";
            }
            else if(voittaja == -1){
                vp2++;
                p1.lisaaPisteita(-1);
                p2.lisaaPisteita(1);
                teksti += "Pelaaja "+p2.getNimi()+" voittaa ";
                if(i==0)
                    teksti += "etu";
                else if(i==1)
                    teksti += "keski";
                else 
                    teksti += "taka";
                teksti += "käden.\n";
            }
        }
        if(asetukset.isPaalla(0)){
            if(vp1==3){
                p1.lisaaPisteita(1);
                teksti += "Lisäksi pelaaja "+p1.getNimi()+" saa 1 extra pisteen lakaisusta.";
            }
            else if(vp2==3){
                p2.lisaaPisteita(1);
                teksti += "Lisäksi pelaaja "+p2.getNimi()+" saa 1 extra pisteen lakaisusta.";
            }
        }
        return teksti;
    }
    
    public void tarkistaKasienJarjestys(Pelaaja p){
        if(p.getKasi(0).vertaa(p.getKasi(1)) == 1 || p.getKasi(1).vertaa(p.getKasi(2)) == 1){
            System.out.println("Pelaaja: "+p.getNimi());
            p.havisi();
        }  
    }
    public void tarkistaPelaajanKadet(Pelaaja p){
        for(int i=0;i<3;i++){
            tarkistaKasi(p.getKasi(i));
            Pelipoyta.tulostaString("Pelaaja "+p.getNimi()+" kasi: "+tekstiArvoille[p.getKasi(i).getArvo()]+": "+p.getKasi(i).toString(", "));
        }
    }
    private void tarkistaKasi(Kasi kasi) {
        kasi.jarjestaArvollaPienimmastaSuurimpaan();

        int[] maarat = new int[13];
        haeSamojenKorttienMaarat(maarat, kasi);
        for (int i = 0; i < tarkistettavat.length; i++) {
            if(kasi.onkoEtukasi() && (i != 5 && i != 7 && i != 8)){     
                continue;
            }
            kasi.setArvo(tarkistettavat[i].tarkista(maarat, kasi));
            if (kasi.getArvo() != 0) {
                break;
            }
        }
    }

    private void haeSamojenKorttienMaarat(int[] maarat, Kasi kasi) {
        for (int i = 0; i < kasi.getMaara(); i++) {
            maarat[kasi.getKortti(i).getArvo()]++;
        }
    }

    public static int tarkistaMaaralla(int[] maarat, int haluttuMaara, int alkaen) {
        for (int i = alkaen; i < maarat.length; i++) {
            if (maarat[i] == haluttuMaara) {
                return i;
            }
        }
        return -1;
    }
//    /**
//     * Järjestää kortit järjestettyyn käteen jos niitä ei vielä siellä ole. Järjestys on korkeimmasta pienimpään.
//     * @param kasi 
//     */
//    public static void lisaaLoput(Kasi kasi, ArrayList<Kortti> lista){
//        if(kasi.getKortti(0).getArvo() == 0 && lista.indexOf(kasi.getKortti(0)) == -1){
//            lista.add(kasi.getKortti(0));
//        }
//        for(int i=kasi.getMaara()-1;i>=0;i--){
//            if( lista.indexOf(kasi.getKortti(i)) == -1){
//                lista.add(kasi.getKortti(i));
//            }
//        }
//    }
    
//    public static void lisaaKorttiArvolla(int kortti, Kasi kasi, ArrayList<Kortti> lista){
//        for(int i=kasi.getMaara()-1;i>=0;i--){
//            if(kasi.getKortti(i).getArvo() == kortti)
//                lista.add(kasi.getKortti(i));
//        }
//    }
    
    public static int vertaaArvot(int arvo1, int arvo2){
        if(arvo1 == 0)
            arvo1 = 13;
        if(arvo2 == 0)
            arvo2 = 13;
        if(arvo1 > arvo2)
            return 1;
        else if(arvo1 < arvo2)
            return -1;
        return 0;
    }
    
}
