package Logiikka;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import Käyttöliittymä.PelaajanToiminnot2;
import Käyttöliittymä.Pelipöytä;
import Logiikka.tarkastajat.Tarkastaja;
import Logiikka.tarkastajat.TarkastettavaKasi;
import java.util.ArrayList;

/**
 *
 * @author Teemu
 */
public class Peli {
    Pakka pakka;
    Poyta poyta;
    Pelipöytä pelipöytä;
    private ArrayList<Pelaaja> pelaajat = new ArrayList<Pelaaja>();
    TodennakoisyysTarkistaja todTar;
    Kortti kortti;
    int valinta;
    int korotus;
    int potti;
    Tarkastaja tarkistaja;
    PelaajanToiminnot toiminto;
    int kierrosluku = 0;


    
    public Peli(Pelipöytä pelipöytä) {
        this.pelipöytä = pelipöytä;
        pelaa();
    }
    /**
     *
     */
    public void pelaa(){
        Pelaaja pelaaja1 = new Pelaaja(100, "Teemu");
        Pelaaja pelaaja2 = new Pelaaja(100, "Pekka");
        Pelaaja pelaaja3 = new Pelaaja(100, "Pekka1");
        Pelaaja pelaaja4 = new Pelaaja(100, "Pekka2");
        Pelaaja pelaaja5 = new Pelaaja(100, "Pekka3");
        Pelaaja pelaaja6 = new Pelaaja(100, "Pekka4");
        Poyta poyta = new Poyta(5);
        pelaajat.add(pelaaja1);
        pelaajat.add(pelaaja2);
        pelaajat.add(pelaaja3);
        pelaajat.add(pelaaja4);
        pelaajat.add(pelaaja5);
        pelaajat.add(pelaaja6);
        pelaaja1.nollaaKasi();
        pelaaja2.nollaaKasi();
        pelaaja3.nollaaKasi();
        pelaaja4.nollaaKasi();
        pelaaja5.nollaaKasi();
        pelaaja6.nollaaKasi();
        uusiPakka();
        pelaajat.get(0).addKortti(pakka.Jaa());
        pelaajat.get(0).addKortti(pakka.Jaa());
       pelaajat.get(1).addKortti(pakka.Jaa());
        pelaajat.get(1).addKortti(pakka.Jaa());
        pelaajat.get(2).addKortti(pakka.Jaa());
        pelaajat.get(2).addKortti(pakka.Jaa());
        pelaajat.get(3).addKortti(pakka.Jaa());
        pelaajat.get(3).addKortti(pakka.Jaa());
        pelaajat.get(4).addKortti(pakka.Jaa());
        pelaajat.get(4).addKortti(pakka.Jaa());
        pelaajat.get(5).addKortti(pakka.Jaa());
        pelaajat.get(5).addKortti(pakka.Jaa());
        
        poyta.lisaaKortti(annaTiettyKortti(2, 3));
        poyta.lisaaKortti(annaTiettyKortti(2, 2));
        poyta.lisaaKortti(annaTiettyKortti(8, 1));
        poyta.lisaaKortti(annaTiettyKortti(0, 0));
        poyta.lisaaKortti(pakka.Jaa());
        
        TarkastettavaKasi[] tarkastettavatKadet = new TarkastettavaKasi[pelaajat.size()];
        for(int i=0;i<pelaajat.size();i++){
            tarkastettavatKadet[i] = new TarkastettavaKasi(pelaajat.get(i).getKasi(), poyta);
        }
        
        for(int i=0; i<5; i++){
            System.out.print(Kortti.korttiArvot[poyta.getKortti(i).getArvo()]+poyta.getKortti(i).getMaa(true)+", ");
        }
        System.out.println("");
        Tarkastaja tarkastaja = new Tarkastaja();
        for(int i=0;i<pelaajat.size();i++){
            tarkastaja.tarkistaKasi(tarkastettavatKadet[i]);
        }
        System.out.println("");
        for(int i=0;i<tarkastettavatKadet.length;i++){
            tulostaKasi(tarkastettavatKadet[i]);
        }
        System.out.println(Kortti.korttiArvot[annaTiettyKortti(8,1).getArvo()]+annaTiettyKortti(0,1).getMaa(true));
    }
    
    /**
     *
     * @param pelaaja
     */
    public void tulostaKasi(TarkastettavaKasi kasi) {
        System.out.println("Arvo: "+Tarkastaja.tekstiArvoille[kasi.getArvo()]);
        for (int i = 0; i < kasi.getMaara(); i++) {
            Kortti kortti = kasi.getKortti(i);
            System.out.print((i != 0 ? "," : "") + Kortti.korttiArvot[kortti.getArvo()] + kortti.getMaa(true));
        }
        System.out.println("\n");


    }

    public Kortti annaTiettyKortti(int arvo, int maa){
        Kortti kortti = new Kortti(arvo, maa);
        return kortti;
    }

    



    /**
     * Palauttaa pelaajan annetulta kohdalta.
     * @param i
     * @return 
     */
    public Pelaaja getPelaaja(int i){
        return pelaajat.get(i);
    }
    /**
     * Alustaa potin, kadet ja tekee uuden pakan GUI:ta varten.
     */
    public void alustaTarvittavat(){
        nollaaPotti();
        nollaaKadet();
        uusiPakka();
    }
    /**
     * Jakaa kortit valitulle pelaajalle valittuun kohtaan GUI:ssa.
     * @param i
     * @param kohta
     * @return 
     */
    public String jaaKortti(int i, int kohta){
        pelaajat.get(i).addKortti(pakka.Jaa());
        return pelaajat.get(i).getKortti(kohta).getArvo()+pelaajat.get(i).getKortti(kohta).getMaa(true);
    }

    /**
     * Luo uuden pakan ja sekoittaa sen.
     */
    public void toiminto(Pelaaja pelaaja) {
        valinta = PelaajanToiminnot2.pelaajanToiminnot(pelaaja);
        if (valinta == 1) {
            PelaajanToiminnot2.korotus(pelaaja, this);
            nollaaToiminnot(pelaaja);
        }
        if (valinta == 2) {
            PelaajanToiminnot.checkMaksu(pelaaja, this);
        }
        if (valinta == 3) {
            PelaajanToiminnot.luovuta(pelaaja);
        }

    }
/**
 * Luo uuden pakan ja sekoittaa sen.
 */
    public void uusiPakka() {
        pakka = new Pakka();
        pakka.Sekoita();
    }

    /**
     * Jakaa yhdet kortit pelaajille.
     */
    public void jaaKortit() {    // korttien jako

        for (int i = 0; i < pelaajat.size(); i++) {
            pelaajat.get(i).addKortti(pakka.Jaa());
        }
    }

/**
 * Metodissa pelin kulku.
 */
 

    /**
     * Lisää pottiin korotus määrän ja palauttaa potin arvon.
     */
    public int lisaaPottiin(int korotus) {
        potti = potti + korotus;

        return potti;
    }
/**
 * Asettaa potin arvoksi 0.
 */
    public void nollaaPotti() {
        potti = 0;
    }
/**
 * Peli kierroksen alussa jakaa uudet kortit ja nollaa potin, kädet, kierrosluvun ja luo uuden pakan.
 */
    public void uusiKasi() {
        kierrosluku = 0;
        nollaaPotti();
        nollaaKadet();
        uusiPakka();
        jaaKortit();
        jaaKortit();
    }

/**
 * Tulostaa pelaajien kortit, jotka heille on jaettu.
 */
    public void tulostaKadet() {
        for (Pelaaja p : pelaajat) {
            
        }
    }
/**
 * Nollaa pelaajien kädet.
 */
    public void nollaaKadet() {
        for (Pelaaja p : pelaajat) {
            p.nollaaKasi();
        }
    }
/**
 * Tarkistaa kenellä pelaajista on paras käsi.
 */
    public void tarkistaVoittaja() {
        int voittaja = tarkistaja.vertaaArvot(0,0);

        ArrayList<Pelaaja> voittajat = new ArrayList<Pelaaja>();
        if (voittaja == 1) {
            voittajat.add(pelaajat.get(0));
        } else if (voittaja == -1) {
            voittajat.add(pelaajat.get(1));
        } else {
            voittajat.add(pelaajat.get(0));
            voittajat.add(pelaajat.get(1));
        }
        jaaPotti(voittajat);

    }
/**
 * Tulostaa pelaajien rahamäärän.
 */
    public void tulostaRahat() {
        for (Pelaaja p : pelaajat) {
            pelipöytä.tulostaRaha(p);
        }
    }
/**
 * Palauttaa halutun pelaajan rahamäärän.
 * @param i
 * @return 
 */
    public int getRaha(int i){
        return pelaajat.get(i).getRaha();
    }
/**
 * Asettaa korotuksen arvoksi annetun määrän.
 * @param maara 
 */
    public void setKorotus(int maara) {
        this.korotus = maara;
    }
/**
 * palauttaa korotuksen määrän.
 * @return int
 */
    public int getKorotus() {
        return korotus;
    }
/**
 * Palauttaa potin.
 * @return int
 */
    public int getPotti(){
        return potti;
    }
/**
 * Asettaa pelaajien korotuksien arvoksi 0.
 */
    public void nollaaKorotus() {
        setKorotus(0);
        for (int i = 0; i < pelaajat.size(); i++) {
            pelaajat.get(i).nollaaKorotus();
        }
    }
/**
 * Jakaa potin voittajien kesken.
 * @param pelaajat 
 */
    public void jaaPotti(ArrayList<Pelaaja> pelaajat) {
        int montako = 0;
        for (int i = 0; i < pelaajat.size(); i++) {
            if (!pelaajat.get(i).getLuovuta()) {
                montako++;
            }
        }
        int maara = potti / montako;
        for (int i = 0; i < pelaajat.size(); i++) {
            if (!pelaajat.get(i).getLuovuta()) {
                pelaajat.get(i).lisaaVoitto(maara);
            }
        }
        potti = potti % pelaajat.size();
    }
    public void jaaPotti(int i){
        pelaajat.get(i).lisaaVoitto(potti);
        
    }
/**
 * Nollaa pelaajien toiminnot.
 * @param pelaaja 
 */
    public void nollaaToiminnot(Pelaaja pelaaja) {
        for (int i = 0; i < pelaajat.size(); i++) {
            if (pelaajat.get(i) != pelaaja) {
                pelaajat.get(i).nollaaToiminto();
            }
        }
    }

    /**
     * Tarkistaa kuinka monta pelaajaa on vielä kierroksella mukana.
     * @return 
     */
    public int montaPelaajaa() {
        int mukana = 0;
        for (Pelaaja p : pelaajat) {
            if (!p.getLuovuta()) {
                mukana++;
            }
        }
        return mukana;
    }
/**
 * Gui:ssa tarvittu korotus metodi.
 * @param i
 * @param maara 
 */
    public void korotus(int i, int maara) {
        PelaajanToiminnot.korotus(pelaajat.get(i), this, maara);

    }
    /**
     * Gui:ssa tarvittu maksu metodi.
     * @param i 
     */
    public void maksu(int i){
        PelaajanToiminnot.checkMaksu(pelaajat.get(i), this);
    }
    /**
     * GUI:ssa tarvittu luovutus metodi.
     * @param i 
     */
    public void luovuta(int i){
        PelaajanToiminnot.luovuta(pelaajat.get(i));
    }
}
